/*
  Created by: Fei Song
  File Name: tiny.cup
*/
   
   
/* ----------------------Preliminary Declarations Section--------------------*/
   
import absyn.*;
   
/* Parser code to change the way the parser reports errors (include
   line and column number of the error). */
parser code {:
    
    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */
    public void report_error(String message, Object info) {
   
        /* Create a StringBuffer called 'm' with the string 'Error' in it. */
        StringBuffer m = new StringBuffer("Error");
   
        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {                
                /* Add to the end of the StringBuffer error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuffer error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }
   
        /* Add to the end of the StringBuffer error message created in
           this method the message that was passed into this method. */
        m.append(" : "+message);
   
        /* Print the contents of the StringBuffer 'm', which contains
           an error message, out on a line. */
        System.err.println(m);
    }
   
    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

    /* Assume true at the start, but set to false with parsing errors */
    public static boolean valid = true;

:};


/* ------------Terminals and Non Terminals----------- */

terminal BOOL, ELSE, IF, INT, RETURN, VOID, WHILE;
terminal PLUS, MINUS, TIMES, DIVIDE, LT, LEQ, GT, GEQ, EQ, NEQ, NOT, OR, AND, ASSIGN, SEMI, COMMA, LPAREN, RPAREN, LSQUARE, RSQUARE, LCURLY, RCURLY;
terminal String ID, NUM, TRUTH;
terminal ERROR;

non terminal NameTy type_specifier;
non terminal VarDecList params, param_list, local_declarations;
non terminal VarDec param, variable_declaration;
non terminal Var variable;
non terminal DecList program, declaration_list;
non terminal Dec declaration, function_declaration, function_prototype;
non terminal ExpList statement_list, args, arg_list;
non terminal Exp compound_statement, statement, expression_statement, selection_statement, iteration_statement, return_statement, expression, or_bool_expression, and_bool_expression, ubool_expression, simple_expression, additive_expression, term, signed_factor, factor, call;

/* ----------------------------Context Free Grammar-------------------- */

start with program;

program ::=                 declaration_list:dl
                                {: RESULT = dl; :}
                            ;

declaration_list ::=        declaration_list:dl declaration:d
                                {:
                                    DecList t = dl;
                                    while (t.tail != null) {
                                        t = t.tail;
                                    }
                                    t.tail = new DecList(d, null);
                                    RESULT = dl;
                                :}
                            | declaration:d
                                {: RESULT = new DecList(d, null); :}
                            ;

declaration ::=             variable_declaration:vd
                                {: RESULT = vd; :}
                            | function_declaration:fd
                                {: RESULT = fd; :}
                            | function_prototype:fp
                                {: RESULT = fp; :}
                            ;

variable_declaration ::=    type_specifier:ts ID:i SEMI 
                                {: RESULT = new SimpleDec(tsleft, tsright, ts, i); :}
                            | type_specifier:ts ID:i LSQUARE NUM:n RSQUARE SEMI
                                {: RESULT = new ArrayDec(tsleft, tsright, ts, i, Integer.parseInt(n)); :}
                            ;

function_declaration ::=    type_specifier:ts ID:i LPAREN params:p RPAREN compound_statement:cs
                                {: RESULT = new FunctionDec(tsleft, tsright, ts, i, p, cs); :}
                            ;

function_prototype ::=      type_specifier:ts ID:i LPAREN params:p RPAREN SEMI
                                {: RESULT = new FunctionDec(tsleft, tsright, ts, i, p, new NilExp(0, 0)); :}
                            ;

type_specifier ::=          BOOL:b
                                {: RESULT = new NameTy(bleft, bright, NameTy.BOOL); :}
                            | INT:i 
                                {: RESULT = new NameTy(ileft, iright, NameTy.INT); :}
                            | VOID:v
                                {: RESULT = new NameTy(vleft, vright, NameTy.VOID); :}
                            ;

params ::=                  param_list:pl
                                {: RESULT = pl; :}
                            | VOID:v
                                {: RESULT = new VarDecList(null, null); :}
                            ;

compound_statement ::=      LCURLY:l local_declarations:ld statement_list:sl RCURLY
                                {: RESULT = new CompoundExp(lleft, lright, ld, sl); :}
                            ;

param_list ::=              param_list:pl COMMA param:p 
                                {:  
                                    VarDecList t = pl;
                                    while (t.tail != null) {
                                        t = t.tail;
                                    }
                                    t.tail = new VarDecList(p, null);
                                    RESULT = pl;
                                :}
                            | param:p
                                {: RESULT = new VarDecList(p, null); :}
                            ;

local_declarations ::=      local_declarations:ld variable_declaration:vd 
                                {:  
                                    VarDecList t = ld;
                                    while (t.tail != null) {
                                        t = t.tail;
                                    }
                                    t.tail = new VarDecList(vd, null);
                                    RESULT = ld;
                                :}
                            | 
                                {: RESULT = new VarDecList(null, null); :}
                            ;

statement_list ::=          statement_list:sl statement:s 
                                {:  
                                    ExpList t = sl;
                                    while (t.tail != null) {
                                        t = t.tail;
                                    }
                                    t.tail = new ExpList(s, null);
                                    RESULT = sl;
                                :}
                            | 
                                {: RESULT = new ExpList(null, null); :}
                            ;

param ::=                   type_specifier:ts ID:i
                                {: RESULT = new SimpleDec(tsleft, tsright, ts, i); :}
                            | type_specifier:ts ID:i LSQUARE RSQUARE
                                {: RESULT = new ArrayDec(tsleft, tsright, ts, i, -1); :} // CFG doesnt match Ci spec given
                            ;

statement ::=               expression_statement:es 
                                {: RESULT = es; :}
                            | compound_statement:cs 
                                {: RESULT = cs; :}
                            | selection_statement:ss 
                                {: RESULT = ss; :}
                            | iteration_statement:is 
                                {: RESULT = is; :}
                            | return_statement:rs
                                {: RESULT = rs; :}
                            ;

expression_statement ::=    expression:e SEMI 
                                {: RESULT = e; :}
                            | SEMI
                                {: RESULT = new NilExp(0, 0); :}
                            ;

selection_statement ::=     IF:i LPAREN expression:e RPAREN statement:s
                                {: RESULT = new IfExp(ileft, iright, e, s, null); :}
                            | IF:i LPAREN expression:e RPAREN statement:s1 ELSE statement:s2
                                {: RESULT = new IfExp(ileft, iright, e, s1, s2); :}
                            ;

iteration_statement ::=     WHILE:w LPAREN expression:e RPAREN statement:s
                                {: RESULT = new WhileExp(wleft, wright, e, s); :}
                            ;

return_statement ::=        RETURN:r expression:e SEMI 
                                {: RESULT = new ReturnExp(rleft, rright, e); :}
                            | RETURN:r SEMI
                                {: RESULT = new ReturnExp(rleft, rright, null); :}
                            ;

expression ::=              variable:v ASSIGN expression:e 
                                {: RESULT = new AssignExp(vleft, vright, new VarExp(vleft, vright, v), e); :}
                            | or_bool_expression:obe
                                {: RESULT = obe; :}
                            ;

variable ::=                ID:i
                                {: RESULT = new SimpleVar(ileft, iright, i); :}
                            | ID:i LSQUARE expression:e RSQUARE
                                {: RESULT = new IndexVar(ileft, iright, i, e); :}
                            ;

or_bool_expression ::=      or_bool_expression:obe OR and_bool_expression:abe
                                {: RESULT = new OpExp(obeleft, oberight, obe, OpExp.OR, abe); :}
                            | and_bool_expression:abe
                                {: RESULT = abe; :}
                            ;

and_bool_expression ::=     and_bool_expression:abe AND ubool_expression:ube
                                {: RESULT = new OpExp(abeleft, aberight, abe, OpExp.AND, ube); :}
                            | ubool_expression:ube
                                {: RESULT = ube; :}
                            ;

ubool_expression ::=        NOT ubool_expression:ube
                                {: RESULT = new OpExp(ubeleft, uberight, new NilExp(0,0), OpExp.NOT, ube); :}
                            | simple_expression:se
                                {: RESULT = se; :}
                            ;

simple_expression ::=       additive_expression:ae1 LT additive_expression:ae2
                                {: RESULT = new OpExp(ae1left, ae1right, ae1, OpExp.LT, ae2); :}
                            | additive_expression:ae1 LEQ additive_expression:ae2
                                {: RESULT = new OpExp(ae1left, ae1right, ae1, OpExp.LEQ, ae2); :}
                            | additive_expression:ae1 EQ additive_expression:ae2
                                {: RESULT = new OpExp(ae1left, ae1right, ae1, OpExp.EQ, ae2); :}
                            | additive_expression:ae1 NEQ additive_expression:ae2
                                {: RESULT = new OpExp(ae1left, ae1right, ae1, OpExp.NEQ, ae2); :}
                            | additive_expression:ae1 GT additive_expression:ae2
                                {: RESULT = new OpExp(ae1left, ae1right, ae1, OpExp.GT, ae2); :}
                            | additive_expression:ae1 GEQ additive_expression:ae2
                                {: RESULT = new OpExp(ae1left, ae1right, ae1, OpExp.GEQ, ae2); :}
                            | additive_expression:ae
                                {: RESULT = ae; :}
                            ;

additive_expression ::=     additive_expression:ae PLUS term:t 
                                {: RESULT = new OpExp(aeleft, aeright, ae, OpExp.PLUS, t); :}
                            | additive_expression:ae MINUS term:t 
                                {: RESULT = new OpExp(aeleft, aeright, ae, OpExp.MINUS, t); :}
                            | term:t
                                {: RESULT = t; :}
                            ;

term ::=                    term:t TIMES signed_factor:sf
                                {: RESULT = new OpExp(tleft, tright, t, OpExp.TIMES, sf); :}
                            | term:t DIVIDE signed_factor:sf
                                {: RESULT = new OpExp(tleft, tright, t, OpExp.DIVIDE, sf); :}
                            | signed_factor:sf
                                {: RESULT = sf; :}
                            ;

signed_factor ::=           MINUS signed_factor:sf 
                                {: RESULT = new OpExp(sfleft, sfright, new NilExp(0, 0), OpExp.MINUS, sf); :}
                            | factor:f
                                {: RESULT = f; :}
                            ;

factor ::=                  LPAREN expression:e RPAREN 
                                {: RESULT = e; :}
                            | variable:v
                                {: RESULT = new VarExp(vleft, vright, v); :}
                            | call:c
                                {: RESULT = c; :}
                            | NUM:n
                                {: RESULT = new IntExp(nleft, nright, Integer.parseInt(n)); :}
                            | TRUTH:t
                                {: RESULT = new BoolExp(tleft, tright, Boolean.parseBoolean(t)); :}
                            ;

call ::=                    ID:i LPAREN args:a RPAREN
                                {: RESULT = new CallExp(ileft, iright, i, a); :}
                            ;

args ::=                    arg_list:al
                                {: RESULT = al; :}
                            | 
                                {: RESULT = new ExpList(null, null); :}
                            ;

arg_list ::=                arg_list:al COMMA expression:e 
                                {:
                                    ExpList t = al;
                                    while (t.tail != null) {
                                        t = t.tail;
                                    }
                                    t.tail = new ExpList(e, null);
                                    RESULT = al;
                                :}
                            | expression:e
                                {: RESULT = new ExpList(e, null); :}
                            ;
