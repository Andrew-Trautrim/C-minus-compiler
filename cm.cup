/*
  Created by: Fei Song
  File Name: tiny.cup
*/
   
   
/* ----------------------Preliminary Declarations Section--------------------*/
   
import absyn.*;
   
/* Parser code to change the way the parser reports errors (include
   line and column number of the error). */
parser code {:
    
    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */
    public void report_error(String message, Object info) {
   
        /* Create a StringBuffer called 'm' with the string 'Error' in it. */
        StringBuffer m = new StringBuffer("Error");
   
        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {                
                /* Add to the end of the StringBuffer error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuffer error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }
   
        /* Add to the end of the StringBuffer error message created in
           this method the message that was passed into this method. */
        m.append(" : "+message);
   
        /* Print the contents of the StringBuffer 'm', which contains
           an error message, out on a line. */
        System.err.println(m);
    }
   
    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

    /* Assume true at the start, but set to false with parsing errors */
    public static boolean valid = true;

:};
   

/* ------------Terminals and Non Terminals----------- */
   
terminal BOOL, ELSE, IF, INT, RETURN, VOID, WHILE;
terminal PLUS, MINUS, TIMES, DIVIDE, LT, LEQ, GT, GEQ, EQ, NEQ, TILDE, OR, AND, ASSIGN, SEMI, COMMA, LPAREN, RPAREN, LSQUARE, RSQUARE, LCURLY, RCURLY;
terminal String ID, NUM, TRUTH;
terminal ERROR;

non terminal ExpList program, declaration_list;

/* ----------------------------Context Free Grammar-------------------- */
   
start with program;

program ::= {: RESULT = new ExpList(null, null); :};

// program ::= declaration_list:dl
//             {: RESULT = dl; :}
//             ;

// declaration_list ::=  declaration_list:dl declaration:d
//                       {:  ExpList t = dl;
//                           while (t.tail != null) {
//                             t = t.tail;
//                           }
//                           t.tail = new ExpList(d, null);
//                           RESULT = dl;
//                       :}
//                     | declaration:d
//                       {: RESULT = new ExpList(d, null) :}
//                     ;

// declaration ::=   variable_declaration:vd
//                   {: RESULT= = vd; :}
//                 | function_declaration:fd
//                   {: RESULT = fd; :}
//                 | function_prototype:fp
//                   {: RESULT = fp; :}
//                 ;

// variable_declaration ::=  type_specifier:ts ID SEMI 
//                         | type_specifier:ts ID LSQUARE NUM RSQUARE SEMI
//                         ;

// function_declaration ::=  type_specifier:ts ID LPAREN params:p RPAREN compound_statement:cs
//                         ;

// function_prototype ::=  type_specifier:ts ID LPAREN params:p RPAREN SEMI
//                       ;

// type_specifier ::=  BOOL
//                   | INT 
//                   | VOID
//                   ;

// params ::=  param_list:pl
//             {: RESULT = pl; :}
//           | VOID
//           ;

// compound_statement ::=  LCURLY local_declarations:ld statement_list:sl RCURLY
//                       ;

// param_list ::=  param_list:pl COMMA param:p 
//               | param:p
//                 {: RESULT = p; :}
//               ;

// local_declarations ::=  local_declarations:ld variable_declaration:vd 
//                       | 
//                       ;

// statement_list ::=  statement_list:sl statement:s 
//                     {:  ExpList t = sl;
//                         while (t.tail != null) {
//                           t = t.tail;
//                         }
//                         t.tail = new ExpList(d, null);
//                         RESULT = dl;
//                     :}
//                   | 
//                   ;

// param ::=   type_specifier:ts ID 
//           | type_specifier:ts ID LSQUARE RSQUARE
//           ;

// statement ::=   expression_statement:es 
//                 {: RESULT = es; :}
//               | compound_statement:cs 
//                 {: RESULT = cs; :}
//               | selection_statement:ss 
//                 {: RESULT = ss; :}
//               | iteration_statement:is 
//                 {: RESULT = is; :}
//               | return_statement:rs
//                 {: RESULT = rs; :}
//               ;

// expression_statement ::=  expression:e SEMI 
//                         | SEMI
//                         ;

// selection_statement ::=   IF:i LPAREN expression:e RPAREN statement:s
//                           {: RESULT = new IfExp(ileft, iright, e, s, null); :}
//                         | IF:i LPAREN expression:e RPAREN statement:s1 ELSE statement:s2
//                           {: RESULT = new IfExp(ileft, iright, e, s1, s2); :}
//                         ;

// iteration_statement ::=   WHILE:w LPAREN expression:e RPAREN statement:s
//                           {: RESULT = new WhileExp(wleft, wright, e, s) :}
//                         ;

// return_statement ::=  RETURN:r expression:e SEMI 
//                       {: RESULT = new ReturnExp(rleft, rright, e) :}
//                     | RETURN SEMI
//                       {: RESULT = new ReturnExp(rleft, rright, null) :}
//                     ;

// expression ::=  variable:v ASSIGN expression:e 
//                 {: RESULT = new AssignExp(vleft, vright, v, e); :}
//               | or_bool_expression:obe
//                 {: RESULT = obe; :}
//               ;

// variable ::=  ID:i
//               {: RESULT = new VarExp(ileft, iright, i) :}
//             | ID LSQUARE expression:e RSQUARE
//             ;

// or_bool_expression ::=  or_bool_expression:obe OR and_bool_expression:abe
//                       | and_bool_expression:abe
//                         {: RESULT = abe; :}
//                       ;

// and_bool_expression ::=   and_bool_expression:abe AND ubool_expression:ube
//                         | ubool_expression:ube
//                         ;

// ubool_expression ::=  TILDE ubool_expression:ube
//                     | simple_expression:se
//                       {: RESULT = se; :}
//                     ;

// simple_expression ::=   additive_expression:ae relop:ro additive_expression:ae 
//                       | additive_expression:ae
//                         {: RESULT = ae; :}
//                       ;

// additive_expression ::=   additive_expression:ae addop:ao term:t 
//                         | term:t
//                           {: RESULT = t; :}
//                         ;

// relop ::=   LT 
//           | LEQ 
//           | EQ 
//           | NEQ 
//           | GT 
//           | GEQ
//           ;

// addop ::=   PLUS 
//           | MINUS
//           ;

// term ::=  term:t mulop:mo signed_factor:sf
//         | signed_factor:sf
//           {: RESULT = sf; :}
//         ;

// mulop ::=   TIMES 
//           | DIVIDE
//           ;

// signed_factor ::=   MINUS signed_factor:sf 
//                   | factor:f
//                     {: RESULT = f; :}
//                   ;

// factor ::=  LPAREN expression:E RPAREN 
//           | variable:v
//             {: RESULT = v; :}
//           | call:c
//             {: RESULT = c; :}
//           | NUM 
//           | TRUTH
//           ;

// call ::=  ID:i LPAREN args:a RPAREN SEMI
//           {: RESULT = new CallExp(ileft, iright, i, a) :}
//         ;

// args ::=  arg_list:al
//           {: RESULT = al :}
//         | 
//         ;

// arg_list ::=  arg_list:al COMMA expression:e 
//             | expression:e
//               {: RESULT = e; :}
//             ;

// /* CFG */

// program ::= declaration_list
// declaration_list ::= declaration_list declaration
// declaration ::= variable_declaration | function_declaration | function_prototype
// variable_declaration ::= type_specifier ID SEMI | type_specifier ID LSQUARE NUM RSQUARE SEMI
// function_declaration ::= type_specifier ID LPAREN params RPAREN compound_statement
// function_prototype ::= type_specifier ID LPAREN params RPAREN SEMI
// type_specifier ::= BOOL | INT | VOID
// params ::= param_list | VOID
// compound_statement ::= LCURLY local_declarations statement_list RCURLY
// param_list ::= param_list COMMA param | param
// local_declarations ::= local_declarations variable_declaration | 
// statement_list ::= statement_list statement | 
// param ::= type_specifier ID | type_specifier ID LSQUARE RSQUARE
// statement ::= expression_statement | compound_statement | selection_statement | iteration_statement | return_statement
// expression_statement ::= expression SEMI | SEMI
// selection_statement ::= IF LPAREN expression RPAREN statement | IF LPAREN expression RPAREN statement ELSE statement
// iteration_statement ::= WHILE LPAREN expression RPAREN statement
// return_statement ::= RETURN expression SEMI | RETURN SEMI
// expression ::= variable ASSIGN expression | or_bool_expression
// variable ::= ID | ID LSQUARE expression RSQUARE
// or_bool_expression ::= or_bool_expression OR and_bool_expression | and_bool_expression
// and_bool_expression ::= and_bool_expression AND ubool_expression
// ubool_expression ::= TILDE ubool_expression | simple_expression
// simple_expression ::= additive_expression relop additive_expression | additive_expression
// additive_expression ::= additive_expression addop term | term
// relop ::= LT | LEQ | EQ | NEQ| GT | GEQ
// addop ::= PLUS | MINUS
// term ::= term mulop signed_factor | signed_factor
// mulop ::= TIMES | DIVIDE
// signed_factor ::= MINUS signed_factor| factor
// factor ::= LPAREN expression RPAREN | variable | call | NUM | TRUTH
// call ::= ID LPAREN args RPAREN SEMI
// args ::= arg_list | 
// arg_list ::= arg_list COMMA expression | expression
